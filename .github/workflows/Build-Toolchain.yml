name: Build OpenWrt Toolchain

on:
  workflow_dispatch:
  # schedule:
  #   - cron: "0 9 */6 * *" # 每六天早上9点运行一次

permissions:
  contents: read

jobs:
  build_toolchain:
    name: Build OpenWrt Toolchain
    runs-on: ubuntu-latest

    steps:
      - name: Checkout OpenWrt
        uses: actions/checkout@v4
        with:
          ref: master
          fetch-depth: 0

      - name: Cache
        uses: klever1988/cachewrtbuild@main
        with:
          ccache: 'true'
          mixkey: 'X86'

      - name: Space cleanup and Initialization environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          docker rmi `docker images -q`
          sudo -E rm -rf /usr/share/dotnet /etc/mysql /etc/php /etc/apt/sources.list.d /usr/local/lib/android
          sudo -E apt-mark hold grub-efi-amd64-signed
          sudo -E apt update
          sudo -E apt -y purge azure-cli* docker* ghc* zulu* llvm* firefox google* dotnet* powershell* openjdk* mysql* php* mongodb* dotnet* snap*
          sudo -E apt -y full-upgrade
          sudo -E apt -y install ack antlr3 aria2 asciidoc autoconf automake autopoint binutils bison build-essential bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libreadline-dev libssl-dev libtool lrzsz mkisofs msmtp nano ninja-build p7zip p7zip-full patch pkgconf python3 python3-pip libpython3-dev qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev
          sudo -E systemctl daemon-reload
          sudo -E apt -y autoremove --purge
          sudo -E apt clean
          sudo -E timedatectl set-timezone "Asia/Shanghai"
          df -h

      - name: Update feeds
        run: |
          sed -i 's/#src-git helloworld/src-git helloworld/g' ./feeds.conf.default
          ./scripts/feeds update -a
          ./scripts/feeds install -a

      - name: Generate configuration file
        run: |
          echo -e 'CONFIG_DEVEL=y\nCONFIG_CCACHE=y' >> .config
          make defconfig

      - name: Build toolchain
        run: make toolchain/install -j$(nproc) V=s

      - name: Check space usage
        if: (!cancelled())
        run: df -hT
